// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.xebia.wartelist.domain;

import com.xebia.wartelist.domain.HospitalDataOnDemand;
import com.xebia.wartelist.domain.HospitalEmployee;
import com.xebia.wartelist.domain.HospitalEmployeeDataOnDemand;
import com.xebia.wartelist.domain.UserDataOnDemand;
import com.xebia.wartelist.service.HospitalEmployeeService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HospitalEmployeeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HospitalEmployeeDataOnDemand: @Component;
    
    private Random HospitalEmployeeDataOnDemand.rnd = new SecureRandom();
    
    private List<HospitalEmployee> HospitalEmployeeDataOnDemand.data;
    
    @Autowired
    HospitalDataOnDemand HospitalEmployeeDataOnDemand.hospitalDataOnDemand;
    
    @Autowired
    UserDataOnDemand HospitalEmployeeDataOnDemand.userDataOnDemand;
    
    @Autowired
    HospitalEmployeeService HospitalEmployeeDataOnDemand.hospitalEmployeeService;
    
    public HospitalEmployee HospitalEmployeeDataOnDemand.getNewTransientHospitalEmployee(int index) {
        HospitalEmployee obj = new HospitalEmployee();
        return obj;
    }
    
    public HospitalEmployee HospitalEmployeeDataOnDemand.getSpecificHospitalEmployee(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HospitalEmployee obj = data.get(index);
        BigInteger id = obj.getId();
        return hospitalEmployeeService.findHospitalEmployee(id);
    }
    
    public HospitalEmployee HospitalEmployeeDataOnDemand.getRandomHospitalEmployee() {
        init();
        HospitalEmployee obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return hospitalEmployeeService.findHospitalEmployee(id);
    }
    
    public boolean HospitalEmployeeDataOnDemand.modifyHospitalEmployee(HospitalEmployee obj) {
        return false;
    }
    
    public void HospitalEmployeeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = hospitalEmployeeService.findHospitalEmployeeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HospitalEmployee' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HospitalEmployee>();
        for (int i = 0; i < 10; i++) {
            HospitalEmployee obj = getNewTransientHospitalEmployee(i);
            try {
                hospitalEmployeeService.saveHospitalEmployee(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
