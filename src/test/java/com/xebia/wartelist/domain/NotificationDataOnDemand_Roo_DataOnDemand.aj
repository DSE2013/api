// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.xebia.wartelist.domain;

import com.xebia.wartelist.domain.Notification;
import com.xebia.wartelist.domain.NotificationDataOnDemand;
import com.xebia.wartelist.service.NotificationService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect NotificationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NotificationDataOnDemand: @Component;
    
    private Random NotificationDataOnDemand.rnd = new SecureRandom();
    
    private List<Notification> NotificationDataOnDemand.data;
    
    @Autowired
    NotificationService NotificationDataOnDemand.notificationService;
    
    public Notification NotificationDataOnDemand.getNewTransientNotification(int index) {
        Notification obj = new Notification();
        setCreatedAt(obj, index);
        setDisplayed(obj, index);
        setMessage(obj, index);
        setTitle(obj, index);
        setUpdatedAt(obj, index);
        return obj;
    }
    
    public void NotificationDataOnDemand.setCreatedAt(Notification obj, int index) {
        Date createdAt = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedAt(createdAt);
    }
    
    public void NotificationDataOnDemand.setDisplayed(Notification obj, int index) {
        Boolean displayed = Boolean.TRUE;
        obj.setDisplayed(displayed);
    }
    
    public void NotificationDataOnDemand.setMessage(Notification obj, int index) {
        String message = "message_" + index;
        obj.setMessage(message);
    }
    
    public void NotificationDataOnDemand.setTitle(Notification obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public void NotificationDataOnDemand.setUpdatedAt(Notification obj, int index) {
        Date updatedAt = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedAt(updatedAt);
    }
    
    public Notification NotificationDataOnDemand.getSpecificNotification(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Notification obj = data.get(index);
        BigInteger id = obj.getId();
        return notificationService.findNotification(id);
    }
    
    public Notification NotificationDataOnDemand.getRandomNotification() {
        init();
        Notification obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return notificationService.findNotification(id);
    }
    
    public boolean NotificationDataOnDemand.modifyNotification(Notification obj) {
        return false;
    }
    
    public void NotificationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = notificationService.findNotificationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Notification' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Notification>();
        for (int i = 0; i < 10; i++) {
            Notification obj = getNewTransientNotification(i);
            try {
                notificationService.saveNotification(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
