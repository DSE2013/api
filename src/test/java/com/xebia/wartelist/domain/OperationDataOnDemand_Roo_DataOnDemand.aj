// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.xebia.wartelist.domain;

import com.xebia.wartelist.domain.DoctorDataOnDemand;
import com.xebia.wartelist.domain.Operation;
import com.xebia.wartelist.domain.OperationDataOnDemand;
import com.xebia.wartelist.domain.OperationTypeDataOnDemand;
import com.xebia.wartelist.domain.PatientDataOnDemand;
import com.xebia.wartelist.domain.TimeSlotDataOnDemand;
import com.xebia.wartelist.service.OperationService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OperationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OperationDataOnDemand: @Component;
    
    private Random OperationDataOnDemand.rnd = new SecureRandom();
    
    private List<Operation> OperationDataOnDemand.data;
    
    @Autowired
    DoctorDataOnDemand OperationDataOnDemand.doctorDataOnDemand;
    
    @Autowired
    OperationTypeDataOnDemand OperationDataOnDemand.operationTypeDataOnDemand;
    
    @Autowired
    PatientDataOnDemand OperationDataOnDemand.patientDataOnDemand;
    
    @Autowired
    TimeSlotDataOnDemand OperationDataOnDemand.timeSlotDataOnDemand;
    
    @Autowired
    OperationService OperationDataOnDemand.operationService;
    
    public Operation OperationDataOnDemand.getNewTransientOperation(int index) {
        Operation obj = new Operation();
        return obj;
    }
    
    public Operation OperationDataOnDemand.getSpecificOperation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Operation obj = data.get(index);
        BigInteger id = obj.getId();
        return operationService.findOperation(id);
    }
    
    public Operation OperationDataOnDemand.getRandomOperation() {
        init();
        Operation obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return operationService.findOperation(id);
    }
    
    public boolean OperationDataOnDemand.modifyOperation(Operation obj) {
        return false;
    }
    
    public void OperationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = operationService.findOperationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Operation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Operation>();
        for (int i = 0; i < 10; i++) {
            Operation obj = getNewTransientOperation(i);
            try {
                operationService.saveOperation(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
